const logger = require('logger.js')("ROChargenPHP Module");
const INVALID = -1;
const hooman = require('hooman');

async function getCharaLink(message, args, max_values, link) { 
  if (args.length === 0) {
    message.channel.send("Need to specify a name.");
    return;
  }
  // only get last argument if greater than 1, else empty string
  const lastArg = args.length > 1 ? args[args.length - 1] : "";
  const values = checkValues(lastArg, max_values);
  // check if values are valid, else random
  const params1 = values.params1 > INVALID ? values.params1 : getRandInt(1, max_values[0]);
  const params2 = values.params2 > INVALID ? values.params2 : getRandInt(1, max_values[1]);
  if (values.params1 > INVALID || values.params2 > INVALID) {
    args.pop();
  }

  logger.info(args);
  const charaName = args.join('_');

  // used to force cache every time it is called
  const timestamp = Date.now();
  const fullLink = `${link}${charaName}/${params1}/${params2}?${timestamp}`;
  const response = await hooman.get(fullLink);
  const msg = await message.channel.send(`\`${charaName} - ${params1}/${params2}\``, {
    files: [response.rawBody,
    ]
  }); 
  
  //const msg = await message.channel.send(`${link}${charaName}/${params1}/${params2}?${timestamp}`);
};

function checkValues(string, max_values) {
  const params = string.split('/');
  let params1 = -1;
  let params2 = -1;
  
  if (params.length > 1) {
    params1 = !isNaN(params[0]) && inBetween(params[0], 1, max_values[0]) ? params[0] : params1;
    params2 = !isNaN(params[1]) && inBetween(params[1], 1, max_values[1]) ? params[1] : params2;
  }
  logger.debug(`params1: ${params1}, params2: ${params2}`);
  return {
    params1: params1,
    params2: params2,
  }
}

function getRandInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function inBetween(value, min, max) {
  return (value >= min && value <= max);
}

module.exports = getCharaLink;
